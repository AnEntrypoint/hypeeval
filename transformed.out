#^index.js&^
/**
 * Main entry point of the application.
 * @module index
 */

const runCall = require("./lib/runCall.js");
const doeval = require("./lib/eval.js");

module.exports = {
  /**
   * Function to run a call in the application.
   * @function runCall
   * @param {number} index - The index of the call to run.
   * @param {Array} calls - The array of calls to run.
   * @param {Object} input - The input object for the call.
   * @param {string} pk - The pk value.
   * @param {Function} ipcCall - The ipcCall function.
   * @param {Function} refresh - The refresh function.
   * @returns {Promise<Array>} - A promise that resolves to the updated array of calls.
   */
  runCall: runCall,

  /**
   * Function to evaluate JavaScript code.
   * @function doeval
   * @param {string} input - The JavaScript code to evaluate.
   * @returns {Promise<Object>} - A promise that resolves to the result of the evaluation.
   */
  doeval: doeval
};
#^lib/eval.js&^
/**
 * Module for evaluating JavaScript code.
 * @module eval
 */

const { newAsyncContext } = require("quickjs-emscripten");

/**
 * Function to run JavaScript code asynchronously.
 * @function run
 * @param {string} input - The JavaScript code to run.
 * @returns {Promise<Object>} - A promise that resolves to the result of the code execution.
 */
const run = async (input) => {
  let stdout = [];

  const context = await newAsyncContext();
  
  const api = {
    log: (...params) => {
      params.forEach((a) => typeof a === "string" ? stdout.push(a) : stdout.push(JSON.stringify(a)));
    }
  };

  const apiHandle = context.newAsyncifiedFunction("api", async (iname, iparams) => {
    const name = context.getString(iname);
    const jparams = context.getString(iparams);
    
    let params;
    try {
      params = JSON.parse(jparams);
    } catch (e) {
      params = jparams;
    }
    
    const output = await api[name](...params);
    return output;
  });

  apiHandle.consume((fn) => context.setProp(context.global, "api", fn));

  const result = await context.evalCodeAsync(input);

  return new Promise((resolve) => {
    if (result.error) {
      resolve({ error: context.dump(result.error) });
      result.error.dispose();
    } else {
      const value = context.dump(result.value);
      resolve({ value: value, stdout: stdout.join("\n") });
      result.value.dispose();
    }
  });
};

module.exports = run;
#^lib/runCall.js&^
/**
 * Module for running calls in the application.
 * @module runCall
 */

const ev = require("./eval.js");

/**
 * Function to run a call in the application.
 * @function runCall
 * @param {number} index - The index of the call to run.
 * @param {Array} calls - The array of calls to run.
 * @param {Object} input - The input object for the call.
 * @param {string} pk - The pk value.
 * @param {Function} ipcCall - The ipcCall function.
 * @param {Function} refresh - The refresh function.
 * @returns {Promise<Array>} - A promise that resolves to the updated array of calls.
 */
const runCall = async (index, calls, input = {}, pk, ipcCall, refresh) => {
  console.log("run call");
  const call = calls[index];
  call.stdout = "";
  call.stderr = "";

  console.log("calling before");
  const before = await ev(`
    const console = {
      log: (...params) => {
        api('log', JSON.stringify(params))
      }
    };
    let params = ${JSON.stringify(input)};
    ${call.before};
    params
  `);
  console.log({ before });
  call.stdout += before.stdout || "";

  const out = await ipcCall(pk, call.name, before.value);
  call.stdout += out.stdout || "";
  call.stderr += out.stderr || "";
  delete out.stdout;
  delete out.stderr;

  const after = await ev(`
    const console = {
      log: (...params) => {
        api('log', JSON.stringify(params))
      }
    };
    let out = ${JSON.stringify(out)};
    ${call.after};
    out
  `);
  const afterOut = after.value;
  call.stdout += after.stdout || "";
  call.result = JSON.stringify(afterOut, null, 2);
  refresh(calls);

  if (call.output.length) {
    for (let output of call.output) {
      await runCall(output, calls, out, pk, ipcCall, refresh);
    }
  }

  return calls;
};

module.exports = runCall;